#compdef mmh

# Internal state

typeset -ga _makemehappy_commands=() _makemehappy_aliases=()
typeset -gA _makemehappy_aliasmap

_makemehappy_aliasmap=(
    deps      fetch-dependencies
    dump      dump-description
    get       download-source
    init      build-tree-init
    reset     reset-setup
    run       run-instance
    show      show-source
    top       generate-toplevel
)

# Utilities have to be named __makemehappy-*()

__makemehappy-comma-complete() {
    local tag=$1 desc=$2 lst=$3
    local -a already
    compset -P '*,'
    already=( ${(s<,>)IPREFIX} )
    _describe -t $tag $desc $lst -S, -F already -q
}

__makemehappy-architectures() {
    local -a archs
    archs=$(mmh -Q architectures 2>/dev/null)
    __makemehappy-comma-complete \
        makemehappy-architectures 'makemehappy architectures' archs
}

__makemehappy-buildconfigurations() {
    local -a cfgs
    cfgs=( $(mmh -Q buildconfigs 2>/dev/null) )
    __makemehappy-comma-complete \
        makemehappy-build-configurations 'makemehappy build configurations' cfgs
}

__makemehappy-buildtools() {
    local -a tools
    tools=( $(mmh -Q buildtools 2>/dev/null) )
    __makemehappy-comma-complete \
        makemehappy-build-tools 'makemehappy build tools' tools
}

__makemehappy-interfaces() {
    local -a ifcs
    ifcs=( $(mmh -Q interfaces 2>/dev/null) )
    __makemehappy-comma-complete \
        makemehappy-interfaces 'makemehappy interfaces' ifcs
}

__makemehappy-nothing-else() {
    _message -e "no further arguments"
}

__makemehappy-modules () {
    local expl
    local -a modules
    modules=( ${${(f)"$(mmh -q show-source)"}%%:*} )
    _wanted makemehappy-modules expl 'makemehappy modules' \
            compadd "${modules[@]}"
}

__makemehappy-queries () {
    local -a makemehappy_query_keywords
    makemehappy_query_keywords=(
        'toolchains:List toolchains'
        'interfaces:List target interfaces'
        'architectures:List target architectures'
        'buildtools:List build tools'
        'buildconfigs:List build configurations'
    )
    _describe -t makemehappy-queries       \
              'makemehappy query keywords' \
              makemehappy_query_keywords
}

__makemehappy-toolchains() {
    local -a tcs already
    tcs=( $(mmh -Q toolchains 2>/dev/null) )
    compset -P '*,'
    already=( ${(s<,>)IPREFIX} )
    _describe -t makemehappy-toolchains 'makemehappy toolchains' \
              tcs -S, -F already -q
}

# Subcommand completions have to be called _makemehappy-*()

_makemehappy-build() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Run complete module building process"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-build-tree-init() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Initialise module build tree"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-download-source() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Download sources for specified sources"
        return
    fi
    __makemehappy-modules
}

_makemehappy-download-sources() {
    # Should this just be -a for ‘download-source’?
    if [[ -n ${makemehappy_describe} ]]; then
        print "Download sources for all known modules"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-dump-description() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Dump module description as read from module spec"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-fetch-dependencies() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Download dependencies of a module"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-generate-toplevel() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Generate toplevel buildsystem for a module build tree"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-reset-setup() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Reset build-tree meta-data"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-run-instance() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "(Re)run previously configured build-tree"
        return
    fi
    __makemehappy-nothing-else
}

_makemehappy-show-source() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Show source definition for modules"
        return
    fi
    __makemehappy-modules
}

_makemehappy-system() {
    if [[ -n ${makemehappy_describe} ]]; then
        print "Commands for complete or partial system builds"
        return
    fi
    __makemehappy-nothing-else
}

# Main completion entry point

_makemehappy() {
    local curcontext="${curcontext}" state line ret=1
    local mode
    local makemehappycommand
    local makemehappy_describe

    _arguments -C -s -w : \
               {-A,--architectures}'[select architectures to use]:architecture:__makemehappy-architectures' \
               {-B,--buildtools}'[select build-tools to use]:build-tool:__makemehappy-buildtools' \
               {-C,--buildconfigs}'[select build-configurations to use]:build-configuration:__makemehappy-buildconfigurations' \
               {-d,--directory}'[specify build directory]:build directory:_path_files -g "*(/)"' \
               {-F,--force}'[force using MakeMeHappy.yaml]' \
               {-f,--log-file}'[specify log file]:file name:_path_files' \
               {-h,--help}'[display help message]' \
               {-I,--interfaces}'[select interfaces to use]:interface:__makemehappy-interfaces' \
               {-L,--log-all}'[send all output to logging facility]' \
               {-l,--log-to-file}'[log output to file (implies --log-all)]' \
               {-m,--module}'[specify module definition file]:module definition file:_path_files' \
               {-p,--preserve}'[preserve build root instead of deleting it]' \
               {-Q,--query}'[query module build information]:mmh query:__makemehappy-queries' \
               {-q,--quiet}'[disable informational output]' \
               {-s,--source}'[specify additional source definition]:source definition file:_path_files' \
               {-T,--toolchains}'[select toolchains to use]:toolchain:__makemehappy-toolchains' \
               {-v,--verbose}'[request verbose logging]' \
               {-V,--version}'[report makemehappy version]' \
               '*:: :->subcommand_or_options' && ret=0

    [[ -z $state ]] && return ret

    if (( CURRENT == 1 )); then
        zstyle -s ":completion:${curcontext}:subcommands" mode mode || mode='both'
        if [[ ${mode} == 'commands' ]]; then
            _describe -t subcommands 'makemehappy command' _makemehappy_commands \
                && ret=0
        elif [[ ${mode} == 'aliases' ]]; then
            _describe -t subcommands 'makemehappy alias' _makemehappy_aliases \
                && ret=0
        else
            _describe -t subcommands 'makemehappy command or alias' \
                      _makemehappy_commands                         \
                      --                                            \
                      _makemehappy_aliases                          \
                && ret=0
        fi
    else
        makemehappycommand="${words[1]}"
        if [[ -n ${_makemehappy_aliasmap[$makemehappycommand]} ]] ; then
            makemehappycommand="${_makemehappy_aliasmap[$makemehappycommand]}"
        fi
        curcontext="${curcontext%:*}-${makemehappycommand}:"
        _call_function ret _makemehappy-${makemehappycommand}
    fi
    return ret
}

# First time initialisation

local f desc
local -A rev
local makemehappy_describe
makemehappy_describe='yes, please'
for f in ${(k)_makemehappy_aliasmap} ; do
    rev+=( ${_makemehappy_aliasmap[$f]} $f )
done
for f in ${(M)${(k)functions}:#_makemehappy-*} ; do
    desc="$($f)"
    _makemehappy_commands+=( "${f#_makemehappy-}${desc:+:$desc}" )
    if [[ -n ${rev[${f#_makemehappy-}]} ]]; then
        _makemehappy_aliases+=( "${rev[${f#_makemehappy-}]}${desc:+:$desc}" )
    fi
done

# First time dispatch to main function redefinition

_makemehappy "$@"
