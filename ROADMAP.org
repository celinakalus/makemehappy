* Main objectives
** DONE Really generate toplevel CMakeLists.txt
** DONE Add support for extending CMAKE_MODULE_PATH
** DONE Make dependency fetcher build its dep-trace correctly
** DONE Write output to log
** ACTIVE Write log to log file
Here is how I'd actually like to handle this:

- Per default everything goes to stdout.
- Send internal output to the logging facility.
- Send external output to stdout/stderr directly.

Add three flags:

- --log-all (-L) — send everything to logging facility (current behaviour).
- --log-to-file (-l) — everything goes through logging, but nothing (except the
  name of the file, which is printed to stout goes to the logfile. The default
  output file matches the build-directory's name + '.log'.
- --log-file FILE (-f FILE) — Override the default logging file name.

Rationale: The main purpose of MakeMeHappy is to facilitate CI. CI systems come
with error parsers for lots of toolchains. Our custom logging prefix may break
these parsers. In order to avoid this, the defaults will not change external
program output.
** DONE Handle external program return codes correctly
** DONE Run all configured build-instances
…not just the default native build using make.
** DONE Determine inclusion-order for toplevel CMakeLists.txt
* Secondary
** DONE Detect cyclic dependencies in toplevel CMakeLists.txt
** TODO Implement version dependency judgements
** TODO Allow output to both terminal and log
** TODO Add more sub-commands
*** TODO Run compilation instances from build-tree
- [ ] All
- [ ] One
- [ ] Some
** TODO Add options to override dependency versions
It would be best to be able to put the option more than once and for it to use
patterns. So --dep-version "PATTERN=VERSIONTHING", for example:

  mmh --dep-version "*=master" build

…to build a module with all dependency versions set to ‘master’.
** DONE Add YamlStack variant for configuration parsing
** TODO Add option to keep running when a build-instance fails
** TODO Add a way to define dependencies for third-party modules
** DONE With non-temporary build-roots, invert --preserve
** DONE Generate mmh script
Configure:
- Python path
- Data directory (`/usr/share/MakeMeHappy`)
- Config directory (`/etc/MakeMeHappy`)
** TODO Add Debian Packaging
** TODO Flesh out user manual
** TODO Data read from YAML files should be verified
If we don't, we need to check tons of conditions at the points the data is
actually used. Checking data upfront allows us to write much more straight
forward code.
** TODO Allow the user to specify a subset of all defined build instances
If the module.yaml file defines 40 or 50 possible combinations of toolchains,
build configurations, tools and the like, it would be useful to pick from
those. Lists or patterns or both, I'm not sure yet.
* Wishlist
** DONE Forget "tools" — check all dependencies into "deps"
** TODO Zsh completion would be nice
** ACTIVE Gather statistics while running
*** TODO How many dependency versions had a patch-level mismatch?
*** TODO How many dependency versions had a minor mismatch?
*** TODO How many dependency versions had a major mismatch?
*** DONE How many build-instances succeeded/failed?
*** DONE How many build-instances had their test runs succeed/fail?
*** DONE How much time did individual steps take to execute?
- Build-Root Init
- Dependency Fetch
- Toplevel Generation
- Individual Build-Instances
*** DONE Render statistics nicely at program termination
