#!@@PYTHON@@

import argparse
import os
import sys

import makemehappy.build as build
import makemehappy.dependencies as dep
import makemehappy.utilities as mmh
import makemehappy.toplevel as top

from logbook import warn, Logger, StreamHandler
from makemehappy.buildroot import BuildRoot
from makemehappy.cud import CodeUnderTest
from makemehappy.yamlstack import YamlStack, SourceStack

version = "@@VERSION@@"
fullname = "MakeMeHappy"
name = "mmh"

StreamHandler(sys.stdout).push_application()
log = Logger(fullname)

cfg = YamlStack(log, 'Configuration',
                '@@DATADIR@@/config.yaml',
                '@@ETCDIR@@/config.yaml',
                mmh.xdgFile('config.yaml'),
                mmh.dotFile('config.yaml'))

src = SourceStack(log, 'Source Definition',
                  '@@DATADIR@@/sources.yaml',
                  '@@ETCDIR@@/sources.yaml',
                  mmh.xdgFile('sources.yaml'),
                  mmh.dotFile('sources.yaml'))

ap = argparse.ArgumentParser()

ap.add_argument("-d", "--directory",
                default = None,
                help = "specify the build-root directory")

ap.add_argument("-m", "--module",
                default = "module.yaml",
                help = "specify the file that contains the"
                     + " module description (defaults to module.yaml)")

ap.add_argument("-p", "--preserve", action = "store_true",
                help = "preserve build root instead of deleting it")

ap.add_argument("-s", "--source",
                default = [ ],
                action = "append",
                help = "add a module source definition")

ap.add_argument("-V", "--version", action = "store_true",
                help = "show program version")

ap.add_argument("-v", "--verbose", action = "store_true",
                help = "produce verbose output")

ap.add_argument("rest",
                nargs = "*",
                default = [ ],
                help = "sub command to carry out")

cmdargs = ap.parse_args()

if (isinstance(cmdargs.directory, str)):
    cmdargs.preserve = not(cmdargs.preserve)

if (cmdargs.verbose):
    mmh.setVerbosity(1)

if (cmdargs.version):
    print("{} ({}) version {}".format(fullname, name, version))
    exit(0)

for item in cmdargs.source:
    if (os.path.isfile(item) == False):
        mmh.warn("Source definition does not exist: {}".format(item))
        exit(1)
    src.push(cmdargs.source)

cmd = mmh.lookupCommand(cmdargs.rest)

if (len(cmdargs.rest) == 0):
    cmd = 'build'
    cmdargs.rest = [ cmd ]
    log.info("Starting up using default command ({})".format(cmd))
elif (cmd != False):
    log.info("Starting up using '{}' command".format(cmd))

if (cmd == "build"):
    if (os.path.isfile(cmdargs.module) == False):
        mmh.warn("Module definition does not exist: {}".format(cmdargs.module))
        exit(1)
    mod = CodeUnderTest(log, cmdargs.module)
    mod.load()
    root = None
    if (isinstance(cmdargs.directory, str)):
        root = BuildRoot(log, mod, cmdargs.directory)
    else:
        root = BuildRoot(log, mod)
    root.populate()
    root.linkCodeUnderTest()
    root.cd()
    ds = mod.dependencies()
    src.load()
    fr = dep.fetch(log, src, dep.Stack(ds), dep.Trace())
    if (fr == False):
        mmh.warn("Fetching dependencies failed. Giving up.")
        exit(1)
    ext = dep.CMakeExtensions(mod, fr)
    top.generateToplevel(log, cfg, src, fr, ext, mod, 'CMakeLists.txt')
    build.allofthem(mod, ext)
    if (cmdargs.preserve == False):
        root.cleanup()
elif (cmd == "dump-description"):
    data = mmh.load(cmdargs.module)
    mmh.pp(data)
elif (isinstance(cmd, str)):
    print("Not implemented yet: {}".format(cmd))
else:
    mmh.warn("Unknown command: {}".format(cmdargs.rest[0]))
    exit(1)

exit(0)
